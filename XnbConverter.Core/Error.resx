<?xml version="1.0" encoding="utf-8"?>
<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string"/>
                            <xsd:attribute name="type" type="xsd:string"/>
                            <xsd:attribute name="mimetype" type="xsd:string"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string"/>
                            <xsd:attribute name="name" type="xsd:string"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required"/>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>

    <data name="XNB.1" xml:space="preserve">
        <value>Buffer is empty</value>
    </data>
    <data name="XNB.2" xml:space="preserve">
        <value>Invalid file magic value, expected XNB, actual value is {0}</value>
    </data>
    <data name="XNB.3" xml:space="preserve">
        <value>XNB file has been truncated!</value>
    </data>
    <data name="XNB.4" xml:space="preserve">
        <value>Unexpected shared resource ({0}).</value>
    </data>
    <data name="XNB.5" xml:space="preserve">
        <value>Invalid object!</value>
    </data>
    <data name="XNB.6" xml:space="preserve">
        <value>Invalid file export!</value>
    </data>
    <data name="XNB.7" xml:space="preserve">
        <value>Invalid JSON file format: {0}</value>
    </data>
    <data name="XNB.8" xml:space="preserve">
        <value>The {0} file is empty.</value>
    </data>
    <data name="XNB.9" xml:space="preserve">
        <value>{0} is missing the 'content' field.</value>
    </data>
    <data name="XNB.10" xml:space="preserve">
        <value>Reading file '{0}'...</value>
    </data>
    <data name="XNB.11" xml:space="preserve">
        <value>XNB file validation successful!</value>
    </data>
    <data name="XNB.12" xml:space="preserve">
        <value>Successfully read XNB file!</value>
    </data>
    <data name="XNB.13" xml:space="preserve">
        <value>Exporting  {0}...</value>
    </data>
    <data name="XNB.14" xml:space="preserve">
        <value>Found valid XNB magic value!</value>
    </data>
    <data name="XNB.15" xml:space="preserve">
        <value>Target platform: {0}</value>
    </data>
    <data name="XNB.16" xml:space="preserve">
        <value>XNB format version: XNA Game Studio 3.{0}</value>
    </data>
    <data name="XNB.17" xml:space="preserve">
        <value>Compression: {0}</value>
    </data>
    <data name="XNB.18" xml:space="preserve">
        <value>File size: {0} bytes.</value>
    </data>
    <data name="XNB.19" xml:space="preserve">
        <value>Decompressed size: {0} bytes.</value>
    </data>
    <data name="XNB.20" xml:space="preserve">
        <value>Reading from byte position: {0}</value>
    </data>
    <data name="XNB.21" xml:space="preserve">
        <value>Reader count: {0}</value>
    </data>
    <data name="XNB.22" xml:space="preserve">
        <value>Shared resource count: {0}</value>
    </data>
    <data name="XNB.23" xml:space="preserve">
        <value>Invalid target platform found {0}.</value>
    </data>
    <data name="XNB.24" xml:space="preserve">
        <value>Unknown XNB format version {0}.</value>
    </data>
    <data name="Process.1" xml:space="preserve">
        <value>Output file saved: {0}</value>
    </data>
    <data name="Process.2" xml:space="preserve">
        <value>File {0} cannot be saved!</value>
    </data>
    <data name="Process.3" xml:space="preserve">
        <value>Filename: {0} {1}</value>
    </data>
    <data name="Process.4" xml:space="preserve">
        <value>Filename: {0} {1} {2}</value>
    </data>
    <data name="Program.1" xml:space="preserve">
        <value>Optional: Enable concurrency</value>
    </data>
    <data name="Program.2" xml:space="preserve">
        <value>[Required] Input file or folder</value>
    </data>
    <data name="Program.3" xml:space="preserve">
        <value>[Required] Output folder</value>
    </data>
    <data name="Program.4" xml:space="preserve">
        <value>Automatically pack and unpack XNB files based on input</value>
    </data>
    <data name="Program.5" xml:space="preserve">
        <value>Unpack</value>
    </data>
    <data name="Program.6" xml:space="preserve">
        <value>Pack</value>
    </data>
    <data name="Program.7" xml:space="preserve">
        <value>bad command
</value>
    </data>
    <data name="Program.8" xml:space="preserve">
        <value>Catch Exception:</value>
    </data>
    <data name="BufferReader.1" xml:space="preserve">
        <value>'{0}' not found!</value>
    </data>
    <data name="BufferReader.2" xml:space="preserve">
        <value>Buffer search out of range! {0} ~ {1}</value>
    </data>
    <data name="ReaderResolver.1" xml:space="preserve">
        <value>Invalid reader index {0}</value>
    </data>
    <data name="ReaderResolver.2" xml:space="preserve">
        <value>Reader not found, index: {0}</value>
    </data>
    <data name="FileUtils.1" xml:space="preserve">
        <value>Invalid output path {0}
{1}</value>
    </data>
    <data name="FileUtils.2" xml:space="preserve">
        <value>Invalid input path: {0}</value>
    </data>
    <data name="TypeReadHelper.1" xml:space="preserve">
        <value>Unimplemented type: {0}
{1}</value>
    </data>
    <data name="TypeReadHelper.2" xml:space="preserve">
        <value>Error occurred while obtaining reader! 
 Please check the assembly: {0} 
 Whether the corresponding DLL file path exists, or if the path is correctly written to the {1} file. 
 The DLL file may be {2}.dll 
 Error message: {3}</value>
    </data>
    <data name="TypeReadHelper.3" xml:space="preserve">
        <value>Unimplemented type: {0}</value>
    </data>
    <data name="TypeReadHelper.4" xml:space="preserve">
        <value>Class not loaded: {0}!</value>
    </data>
    <data name="TypeReadHelper.5" xml:space="preserve">
        <value>{0} does not exist, DLL loading failed, which may result in unsuccessful xnb parsing, 
 Please modify the correct file path to {1}</value>
    </data>
    <data name="SpriteFont.1" xml:space="preserve">
        <value>Parse file failed</value>
    </data>
    <data name="EnumReader.1" xml:space="preserve">
        <value>value {0} does not correspond to any enum member.</value>
    </data>
    <data name="Texture2DReader.1" xml:space="preserve">
        <value>Texture2D format type ECT1 not implemented!</value>
    </data>
    <data name="Texture2DReader.2" xml:space="preserve">
        <value>Unimplemented Texture2D format type ({0}).</value>
    </data>
    <data name="Texture2DReader.3" xml:space="preserve">
        <value>Image Width: {0}, Height: {1}, Format: {2}</value>
    </data>
    <data name="Texture2DReader.4" xml:space="preserve">
        <value>Found mipcount for {0}, only the first will be used.</value>
    </data>
    <data name="Texture2DReader.5" xml:space="preserve">
        <value>The dimension represented by the width and height of the Texture2D does not match the data size. Current width: {0}, height: {1}, data size: {2}</value>
    </data>
    <data name="LayerReader.1" xml:space="preserve">
        <value>Max value of i is {0}, current value is {1}</value>
    </data>
    <data name="LayerReader.2" xml:space="preserve">
        <value>Tile data error</value>
    </data>
    <data name="PropertieReader.1" xml:space="preserve">
        <value>Invalid map property type: {0}</value>
    </data>
    <data name="TBin10Reader.1" xml:space="preserve">
        <value>Xnb does not currently support Tbin maps with more than {0} layers, currently {1} layers</value>
    </data>
    <data name="TBin10Reader.2" xml:space="preserve">
        <value>Unknown program error</value>
    </data>
    <data name="LZX.1" xml:space="preserve">
        <value>Window size out of range!</value>
    </data>
    <data name="LZX.2" xml:space="preserve">
        <value>Intel E8 call found, invalid for XNB file.</value>
    </data>
    <data name="LZX.3" xml:space="preserve">
        <value>Invalid block type found: {0}</value>
    </data>
    <data name="LZX.4" xml:space="preserve">
        <value>Cannot run outside the window frame.</value>
    </data>
    <data name="LZX.5" xml:space="preserve">
        <value>Out of range! {0} {1} {2}</value>
    </data>
    <data name="LZX.6" xml:space="preserve">
        <value>Specified block type invalid!</value>
    </data>
    <data name="LZX.7" xml:space="preserve">
        <value>EOF reached, data still remaining.</value>
    </data>
    <data name="LZX.8" xml:space="preserve">
        <value>Table overflow!</value>
    </data>
    <data name="LZX.9" xml:space="preserve">
        <value>Table overflow during decoding.</value>
    </data>
    <data name="LZX.10" xml:space="preserve">
        <value>Decoding table did not reach table mask.</value>
    </data>
    <data name="LZX.11" xml:space="preserve">
        <value>Invalid size read in compressed content.</value>
    </data>
    <data name="LZX.12" xml:space="preserve">
        <value>File successfully decompressed!</value>
    </data>
    <data name="LZX.13" xml:space="preserve">
        <value>Extra digits: {0}</value>
    </data>
    <data name="LZX.14" xml:space="preserve">
        <value>Position base: {0}</value>
    </data>
    <data name="LZX.15" xml:space="preserve">
        <value>Intel: {0} = {1}</value>
    </data>
    <data name="LZX.16" xml:space="preserve">
        <value>Block type: {0} = {1}</value>
    </data>
    <data name="LZX.17" xml:space="preserve">
        <value>Remaining block byte count: {0}</value>
    </data>
    <data name="LZX.18" xml:space="preserve">
        <value>Position: {0}, Bit mask: {1}, Table mask: {2}</value>
    </data>
    <data name="LZX.19" xml:space="preserve">
        <value>Bit count: {0}, Bit string: {1}</value>
    </data>
    <data name="LZX.20" xml:space="preserve">
        <value>Symbol: {0}, Symbol string: {1}</value>
    </data>
    <data name="LZX.21" xml:space="preserve">
        <value>--------Block size: {0}, Frame size: {1}</value>
    </data>
    <data name="AudioEngineReader.1" xml:space="preserve">
        <value>Invalid magic value found, {0}</value>
    </data>
    <data name="AudioEngineReader.2" xml:space="preserve">
        <value>Tool version: {0}</value>
    </data>
    <data name="AudioEngineReader.3" xml:space="preserve">
        <value>Format version: {0}</value>
    </data>
    <data name="AudioEngineReader.4" xml:space="preserve">
        <value>Category: {0}, Variable: {1}</value>
    </data>
    <data name="AudioEngineReader.5" xml:space="preserve">
        <value>RPC: {0}</value>
    </data>
    <data name="AudioEngineReader.6" xml:space="preserve">
        <value>DSP preset: {0}</value>
    </data>
    <data name="AudioEngineReader.7" xml:space="preserve">
        <value>DSP parameters: {0}</value>
    </data>
    <data name="AudioEngineReader.8" xml:space="preserve">
        <value>Category offset: {0}</value>
    </data>
    <data name="AudioEngineReader.9" xml:space="preserve">
        <value>Variable offset: {0}</value>
    </data>
    <data name="AudioEngineReader.10" xml:space="preserve">
        <value>Category name index offset: {0}</value>
    </data>
    <data name="AudioEngineReader.11" xml:space="preserve">
        <value>Variable name index offset: {0}</value>
    </data>
    <data name="AudioEngineReader.12" xml:space="preserve">
        <value>Category name offset: {0}</value>
    </data>
    <data name="AudioEngineReader.13" xml:space="preserve">
        <value>Variable name offset: {0}</value>
    </data>
    <data name="AudioEngineReader.14" xml:space="preserve">
        <value>RPC offset: {0}</value>
    </data>
    <data name="AudioEngineReader.15" xml:space="preserve">
        <value>DSP preset offset: {0}</value>
    </data>
    <data name="AudioEngineReader.16" xml:space="preserve">
        <value>DSP parameter offset: {0}</value>
    </data>
    <data name="AudioEngineReader.17" xml:space="preserve">
        <value>Category: {0}</value>
    </data>
    <data name="AudioEngineReader.18" xml:space="preserve">
        <value>Variable: {0}</value>
    </data>
    <data name="AudioEngineReader.19" xml:space="preserve">
        <value>Unsupported XGS format!</value>
    </data>
    <data name="SoundBankReader.1" xml:space="preserve">
        <value>CRC: {0}</value>
    </data>
    <data name="SoundBankReader.2" xml:space="preserve">
        <value>Last modification time low: {0}, Last modification time high: {1}</value>
    </data>
    <data name="SoundBankReader.3" xml:space="preserve">
        <value>Platform: {0}</value>
    </data>
    <data name="SoundBankReader.4" xml:space="preserve">
        <value>Simple hints: {0}</value>
    </data>
    <data name="SoundBankReader.5" xml:space="preserve">
        <value>Complex hints: {0}</value>
    </data>
    <data name="SoundBankReader.6" xml:space="preserve">
        <value>Total hints: {0}</value>
    </data>
    <data name="SoundBankReader.7" xml:space="preserve">
        <value>Waveform libraries: {0}</value>
    </data>
    <data name="SoundBankReader.8" xml:space="preserve">
        <value>Number of sounds: {0}</value>
    </data>
    <data name="SoundBankReader.9" xml:space="preserve">
        <value>Cue name table length: {0}</value>
    </data>
    <data name="SoundBankReader.10" xml:space="preserve">
        <value>Simple hint sound offset: {0}</value>
    </data>
    <data name="SoundBankReader.11" xml:space="preserve">
        <value>Complex hint sound offset: {0}</value>
    </data>
    <data name="SoundBankReader.12" xml:space="preserve">
        <value>Sound offset for names: {0}</value>
    </data>
    <data name="SoundBankReader.13" xml:space="preserve">
        <value>Variation table offset: {0}</value>
    </data>
    <data name="SoundBankReader.14" xml:space="preserve">
        <value>Waveform library name table offset: {0}</value>
    </data>
    <data name="SoundBankReader.15" xml:space="preserve">
        <value>Sound name hash table offset: {0}</value>
    </data>
    <data name="SoundBankReader.16" xml:space="preserve">
        <value>Sound name hash value offset: {0}</value>
    </data>
    <data name="SoundBankReader.17" xml:space="preserve">
        <value>Sound offset: {0}</value>
    </data>
    <data name="SoundBankReader.18" xml:space="preserve">
        <value>Name: {0}</value>
    </data>
    <data name="SoundBankReader.19" xml:space="preserve">
        <value>Wave Banks: {0}</value>
    </data>
    <data name="SoundBankReader.20" xml:space="preserve">
        <value>Cues: {0}</value>
    </data>
    <data name="SoundBankReader.21" xml:space="preserve">
        <value>Found {0}</value>
    </data>
    <data name="SoundBankReader.22" xml:space="preserve">
        <value>Found {1} cues for {0}</value>
    </data>
    <data name="SoundBankReader.23" xml:space="preserve">
        <value>WaveBank Index: {0}</value>
    </data>
    <data name="SoundBankReader.24" xml:space="preserve">
        <value>Found {0} cues!</value>
    </data>
    <data name="SoundBankReader.25" xml:space="preserve">
        <value>Unsupported SoundBank format {0}.</value>
    </data>
    <data name="XactClipReader.1" xml:space="preserve">
        <value>Offset: {0}</value>
    </data>
    <data name="XactClipReader.2" xml:space="preserve">
        <value>Track: {0}</value>
    </data>
    <data name="XactClipReader.3" xml:space="preserve">
        <value>Event Play Wave Pitch Volume Filter Variation</value>
    </data>
    <data name="XactSoundReader.1" xml:space="preserve">
        <value>Extra Data Length: {0}</value>
    </data>
    <data name="XactSoundReader.2" xml:space="preserve">
        <value>Track Index: {0}</value>
    </data>
    <data name="FmtChunk.1" xml:space="preserve">
        <value>For SoundEffect, only wav files in Pcm format are supported. The current format is {0}</value>
    </data>
    <data name="FmtChunk.2" xml:space="preserve">
        <value>For Xact, only wav files in Pcm or AdpcmMs format are supported. The current format is {0}</value>
    </data>
    <data name="FmtChunk.3" xml:space="preserve">
        <value>Not a supported type for the game!</value>
    </data>
    <data name="WaveBank.1" xml:space="preserve">
        <value>- flags   {0}- file_num    {1}- bank name    {2}- entry meta size  {3}- entry name size  {4}- alignment    {5}</value>
    </data>
    <data name="WaveBank.2" xml:space="preserve">
        <value>- Entry Meta Data Element Size is small</value>
    </data>
    <data name="FmtChunkReader.1" xml:space="preserve">
        <value>Invalid WAV format: {0}, should be fmt</value>
    </data>
    <data name="RIFFChunkReader.1" xml:space="preserve">
        <value>Invalid WAV format: {0}, should be RIFF</value>
    </data>
    <data name="RIFFChunkReader.2" xml:space="preserve">
        <value>Invalid wav format: {0}, should be WAVE</value>
    </data>
    <data name="WaveBankReader.1" xml:space="preserve">
        <value>- signature: {0}  big/network endian values</value>
    </data>
    <data name="WaveBankReader.2" xml:space="preserve">
        <value>- signature: {0}  little/intel endian values</value>
    </data>
    <data name="WaveBankReader.3" xml:space="preserve">
        <value>- version : {0}</value>
    </data>
    <data name="WaveBankReader.4" xml:space="preserve">
        <value>Number  Size  Format  SamplingRate  Channels  BitDepth  Output   Path</value>
    </data>
    <data name="WaveBankReader.5" xml:space="preserve">
        <value>offset : {0},format : {1},flags : {2},region_offset : {3},region_length : {4}</value>
    </data>
    <data name="WaveBankReader.6" xml:space="preserve">
        <value>- segment : {0}    offset : {1}    length : {2}({3})</value>
    </data>
</root>